{
  "permissions": {
    "allow": [
      "Bash(flutter gen-l10n:*)",
      "Bash(grep:*)",
      "Bash(rg:*)",
      "Bash(find:*)",
      "Bash(sed:*)",
      "Bash(/usr/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg -n \"l10n\\.\" /mnt/c/moroka/lib/presentation/screens/about/about_screen.dart)",
      "Bash(/usr/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg -n \"l10n\\.\" /mnt/c/moroka/lib/presentation/screens/main/main_screen.dart)",
      "Bash(/usr/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg \"AppLocalizations\" /mnt/c/moroka/lib/presentation/screens/main/main_screen.dart)",
      "Bash(/usr/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg \"app_localizations\" lib/presentation/screens/main/main_screen.dart)",
      "Bash(ls:*)",
      "Bash(flutter analyze:*)",
      "Bash(dart analyze:*)",
      "Bash(python3:*)",
      "Bash(for:*)",
      "Bash(do echo \"Checking $file\")",
      "Bash(done)",
      "Bash(diff:*)",
      "Bash(dart run:*)",
      "Bash(mv:*)",
      "Bash(rm:*)",
      "Bash(/usr/lib/node_modules/@anthropic-ai/claude-code/vendor/flutter-bin/flutter gen-l10n)",
      "Bash(/mnt/c/flutter/bin/flutter gen-l10n)",
      "Bash(export:*)",
      "Bash(flutter:*)",
      "Bash(do echo -n \"$file: \")",
      "Bash(do echo \"=== $file ===\")",
      "Bash(do echo \"=== app_$lang.arb ===\")",
      "Bash(if ! grep -q '\"\"cardsSelected\"\":' \"app_$lang.arb\")",
      "Bash(then echo \"MISSING cardsSelected\")",
      "Bash(fi)",
      "Bash(if ! grep -q '\"\"cardsRemaining\"\":' \"app_$lang.arb\")",
      "Bash(then echo \"MISSING cardsRemaining\")",
      "Bash(do echo \"Validating $file...\")",
      "Bash(/usr/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg --line-number \"[가-힣]+\" lib/presentation/screens/spread_selection/spread_selection_screen.dart)",
      "Bash(/mnt/c/flutter/bin/flutter analyze lib/presentation/screens/spread_selection/spread_selection_screen.dart)",
      "Bash(fvm flutter gen-l10n:*)",
      "Bash(/usr/bin/flutter gen-l10n)",
      "Bash(/usr/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg \"운명의 문을 열다|Enter.*[Dd]estiny|Open.*[Ff]ate\" lib/l10n/ -A 2 -B 2)",
      "Bash(/usr/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg \"\\\"skip\\\"|\\\"next\\\"|\\\"SKIP\\\"|\\\"NEXT\\\"\" lib/l10n/app_en.arb -i -A 2 -B 2)",
      "Bash(/usr/lib/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg \"skip|next\" lib/l10n/app_en.arb -i -A 2 -B 2)",
      "Bash(/mnt/c/flutter/bin/flutter analyze)",
      "Bash(dart generate_l10n.dart:*)",
      "Bash(awk:*)",
      "Bash(do if grep -q \"drawAddedMessage\" \"$file\")",
      "Bash(then echo \"$file: has drawAddedMessage\")",
      "Bash(else echo \"$file: MISSING drawAddedMessage\")",
      "Bash(npm i:*)",
      "Bash(sudo npm i -g @anthropic-ai/claude-code)",
      "Bash(test:*)",
      "Bash(/usr/bin/flutter analyze 2 >& 1)",
      "Bash(dart pub:*)",
      "Bash(/mnt/c/flutter/bin/dart run flutter_gen:flutter_gen_runner)",
      "Bash(/mnt/c/flutter/bin/dart run lib/l10n/regenerate_l10n.dart)",
      "Bash(chmod:*)",
      "Bash(/tmp/add_localization_strings.sh:*)",
      "Bash(# Extract all l10n keys from fallback_messages.dart\ngrep -o 'l10n\\.[a-zA-Z_]*' /mnt/c/moroka/lib/core/constants/fallback_messages.dart | sed 's/l10n\\.//' | sort | uniq > /tmp/fallback_keys.txt\n\n# Extract all keys from app_en.arb (excluding @ metadata keys)\ngrep -o '\"[^@][^\"]*\":' /mnt/c/moroka/lib/l10n/app_en.arb | sed 's/\"//g' | sed 's/://g' | sort | uniq > /tmp/en_keys.txt\n\n# Find missing keys\necho \"=== Missing keys in app_en.arb ===\"\ncomm -23 /tmp/fallback_keys.txt /tmp/en_keys.txt)",
      "Bash(# Extract all keys from app_ko.arb (excluding @ metadata keys)\ngrep -o '\"[^@][^\"]*\":' /mnt/c/moroka/lib/l10n/app_ko.arb | sed 's/\"//g' | sed 's/://g' | sort | uniq > /tmp/ko_keys.txt\n\n# Find missing keys\necho \"=== Missing keys in app_ko.arb ===\"\ncomm -23 /tmp/fallback_keys.txt /tmp/ko_keys.txt)",
      "Bash(# Count total keys required\ntotal_keys=$(wc -l < /tmp/fallback_keys.txt)\n\n# Count missing keys in each file\nmissing_en=$(comm -23 /tmp/fallback_keys.txt /tmp/en_keys.txt | wc -l)\nmissing_ko=$(comm -23 /tmp/fallback_keys.txt /tmp/ko_keys.txt | wc -l)\n\n# Calculate present keys\npresent_en=$((total_keys - missing_en))\npresent_ko=$((total_keys - missing_ko))\n\necho \"=== Summary ===\"\necho \"Total keys required from fallback_messages.dart: $total_keys\"\necho \"\"\necho \"app_en.arb:\"\necho \"  Present: $present_en\"\necho \"  Missing: $missing_en\"\necho \"\"\necho \"app_ko.arb:\"\necho \"  Present: $present_ko\" \necho \"  Missing: $missing_ko\")",
      "Bash(do echo \"=== Checking $file ===\")",
      "Bash(do echo \"=== Checking $file for remainingDraws ===\")",
      "Bash(wc:*)",
      "Bash(# Create a comprehensive report\necho \"=== Language Files Missing Keys Report ===\"\necho\nfor file in app_*.arb; do\n    if [[ \"$file\" == \"app_en_fallback.arb\" ]]; then\n        continue  # Skip the fallback file\n    fi\n    \n    echo \"## $file\"\n    missing_keys=\"\"\n    \n    # Check each required key\n    for key in \"spreadOneCard\" \"spreadThreeCard\" \"spreadCelticCross\" \"spreadRelationship\" \"spreadYesNo\" \"oneCardDescription\" \"threeCardDescription\" \"celticCrossDescription\" \"relationshipDescription\" \"yesNoDescription\"; do\n        if ! grep -q \"\\\"$key\\\"\" \"$file\"; then\n            missing_keys=\"$missing_keys $key\"\n        fi\n    done\n    \n    if [ -z \"$missing_keys\" ]; then\n        echo \"  ✓ All keys present\"\n    else\n        echo \"  Missing keys:$missing_keys\"\n    fi\n    echo\ndone)",
      "Bash(# Check each file individually for better accuracy\necho \"=== Detailed Language Files Report ===\"\necho\n\n# First check English file to see what keys exist\necho \"## Checking app_en.arb for reference:\"\ngrep -E \"(spreadOneCard|spreadThreeCard|spreadCelticCross|spreadRelationship|spreadYesNo|oneCardDescription|threeCardDescription|celticCrossDescription|relationshipDescription|yesNoDescription)\" app_en.arb | cut -d'\"' -f2,4 | sed 's/\"/ = /'\n\necho\necho \"## Summary of missing keys per language:\"\necho\n\n# Check each language\nfor lang in de es fr hi ja ko pt th vi zh; do\n    echo \"### app_${lang}.arb\"\n    \n    # Check for spread name keys\n    echo -n \"  Spread names: \"\n    missing=\"\"\n    grep -q '\"spreadOneCard\"' \"app_${lang}.arb\" || missing=\"${missing}spreadOneCard \"\n    grep -q '\"spreadThreeCard\"' \"app_${lang}.arb\" || missing=\"${missing}spreadThreeCard \"\n    grep -q '\"spreadCelticCross\"' \"app_${lang}.arb\" && echo -n \"✓spreadCelticCross \" || missing=\"${missing}spreadCelticCross \"\n    grep -q '\"spreadRelationship\"' \"app_${lang}.arb\" && echo -n \"✓spreadRelationship \" || missing=\"${missing}spreadRelationship \"\n    grep -q '\"spreadYesNo\"' \"app_${lang}.arb\" && echo -n \"✓spreadYesNo \" || missing=\"${missing}spreadYesNo \"\n    \n    if [ -n \"$missing\" ]; then\n        echo\n        echo \"    Missing: $missing\"\n    else\n        echo \"✓ All present\"\n    fi\n    \n    # Check for description keys\n    echo -n \"  Descriptions: \"\n    missing=\"\"\n    grep -q '\"oneCardDescription\"' \"app_${lang}.arb\" || missing=\"${missing}oneCardDescription \"\n    grep -q '\"threeCardDescription\"' \"app_${lang}.arb\" || missing=\"${missing}threeCardDescription \"\n    grep -q '\"celticCrossDescription\"' \"app_${lang}.arb\" || missing=\"${missing}celticCrossDescription \"\n    grep -q '\"relationshipDescription\"' \"app_${lang}.arb\" || missing=\"${missing}relationshipDescription \"\n    grep -q '\"yesNoDescription\"' \"app_${lang}.arb\" || missing=\"${missing}yesNoDescription \"\n    \n    if [ -n \"$missing\" ]; then\n        echo\n        echo \"    Missing: $missing\"\n    else\n        echo \"✓ All present\"\n    fi\n    echo\ndone)",
      "Bash(/home/djddu/.claude/local/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg -n \"[\\u1100-\\u11FF\\u3130-\\u318F\\uAC00-\\uD7AF]+\" lib/ --type dart)",
      "Bash(/home/djddu/.claude/local/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg -n \"['\\\"]([\\uAC00-\\uD7AF]+)['\\\"]\" lib/ --type dart -A 1 -B 1)",
      "Bash(/home/djddu/.claude/local/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg -n \"Text\\s*\\(\\s*['\\\"][\\uAC00-\\uD7AF]+['\\\"]\" lib/ --type dart)",
      "Bash(dart:*)",
      "Bash(/home/djddu/.claude/local/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg \"AppTextStyles\\.(heading|heading2|heading3|body|body1)(?![A-Za-z])\" --type dart -n)",
      "Bash(/home/djddu/.claude/local/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg \"AppTextStyles\\.(heading|heading2|heading3|body|body1)[^A-Za-z]\" --type dart -n)",
      "Bash(/home/djddu/.claude/local/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg -U \"Container\\s*\\([^)]*\\)\" --type dart)",
      "Bash(/home/djddu/.claude/local/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg -U \"Container\\s*\\([^)]*\\)\" --type dart -A 10)",
      "Bash(/home/djddu/.claude/local/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg -U \"Container\\s*\\(\\s*(?:width|height|margin|padding|decoration|color)[^)]*\\)\" --type dart -B 2 -A 5)",
      "Bash(/home/djddu/.claude/local/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg \"Container\\(\" --type dart -A 15)",
      "Bash(/home/djddu/.claude/local/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg -n '[가-힣]+' /mnt/c/moroka/lib/presentation/screens/ /mnt/c/moroka/lib/presentation/widgets/ /mnt/c/moroka/lib/data/services/ --glob '*.dart')",
      "Bash(/home/djddu/.claude/local/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg -n '\"\"[가-힣][가-힣 ]*\"\"' /mnt/c/moroka/lib/presentation/screens/ /mnt/c/moroka/lib/presentation/widgets/ /mnt/c/moroka/lib/data/services/ --glob '*.dart')",
      "Bash(/home/djddu/.claude/local/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg -n \"Text\\([''\"\"][가-힣][가-힣 ]*[''\"\"]\" /mnt/c/moroka/lib/presentation/screens/ /mnt/c/moroka/lib/presentation/widgets/ /mnt/c/moroka/lib/data/services/ --glob '*.dart')",
      "Bash(/home/djddu/.claude/local/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg -n \"''[가-힣][가-힣 ]*''|\"\"[가-힣][가-힣 ]*\"\"\" /mnt/c/moroka/lib/presentation/screens/ /mnt/c/moroka/lib/presentation/widgets/ /mnt/c/moroka/lib/data/services/ --glob '*.dart')",
      "Bash(/home/djddu/.claude/local/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg -n \"throw.*Exception.*'[가-힣]\" /mnt/c/moroka/lib/data/services/auth_service.dart)",
      "Bash(/home/djddu/.claude/local/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg -n \"'[가-힣][가-힣 ]*'\" /mnt/c/moroka/lib/data/services/admob_service.dart)",
      "Bash(/home/djddu/.claude/local/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg -n \"Exception.*''[가-힣]\" /mnt/c/moroka/lib/ --glob '*.dart')",
      "Bash(/home/djddu/.claude/local/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg -n \"snackbar.*''[가-힣]|SnackBar.*''[가-힣]|showDialog.*''[가-힣]|AlertDialog.*''[가-힣]\" /mnt/c/moroka/lib/ --glob '*.dart' -i)",
      "Bash(/home/djddu/.claude/local/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg -n \"error.*=.*''[가-힣]|errorMessage.*=.*''[가-힣]|message.*:.*''[가-힣]\" /mnt/c/moroka/lib/presentation/screens/ --glob '*_viewmodel.dart' -i)",
      "Bash(/home/djddu/.claude/local/node_modules/@anthropic-ai/claude-code/vendor/ripgrep/x64-linux/rg \"^[[:space:]]*//[[:space:]]*import\" /mnt/c/moroka/lib/presentation --type dart)"
    ],
    "deny": []
  }
}